generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id
  email String @unique

  files        File[]
  folders      Folder[]
  subscription Subscription?
  sharedLinks  SharedLink[]

  usedStorage Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Folder {
  id   String @id @default(cuid())
  name String
  path String

  isTrash   Boolean @default(false)
  isStarred Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  parentId String?
  parent   Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children Folder[] @relation("FolderHierarchy")

  files       File[]
  sharedLinks SharedLink[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, path])
  @@index([userId])
  @@index([path])
  @@index([isTrash])
  @@index([parentId])
}

model File {
  id   String   @id @default(cuid())
  name String
  path String
  size Int
  type FileType

  isTrash   Boolean @default(false)
  isStarred Boolean @default(false)

  fileUrl      String

  imagekitFileId      String  @unique

  userId String
  user   User   @relation(fields: [userId], references: [id])

  folderId String?
  folder   Folder? @relation(fields: [folderId], references: [id], onDelete: Cascade)

  sharedLinks SharedLink[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, path])
  @@index([userId])
  @@index([folderId])
  @@index([path])
  @@index([isTrash])
  @@index([type])
}

model SharedLink {
  id    String @id @default(cuid())
  token String @unique

  fileId   String?
  folderId String?

  file   File?   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  folder Folder? @relation(fields: [folderId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  password  String?
  expiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([fileId])
  @@index([folderId])
  @@index([expiresAt])
}

model Subscription {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  plan   SubscriptionPlan
  status SubscriptionStatus @default(ACTIVE)

  stripeCustomerId     String?
  stripeSubscriptionId String?   @unique
  stripePriceId        String?
  currentPeriodEnd     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SubscriptionPlan {
  FREE
  PRO_MONTHLY
  PRO_YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCEL_SCHEDULED
  CANCELLED
}

enum FileType {
  IMAGE
  VIDEO
  AUDIO
  PDF
  DOCUMENT
}
