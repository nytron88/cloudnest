generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id
  email          String         @unique

  files          File[]
  folders        Folder[]
  subscription   Subscription?
  sharedLinks    SharedLink[]

  usedStorage    Int            @default(0)
  
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Folder {
  id             String         @id @default(cuid())
  name           String
  path           String

  isTrash        Boolean        @default(false)
  isStarred      Boolean        @default(false)

  userId         String
  user           User           @relation(fields: [userId], references: [id])

  parentId       String?
  parent         Folder?        @relation("FolderHierarchy", fields: [parentId], references: [id])
  children       Folder[]       @relation("FolderHierarchy")

  files          File[]
  sharedLinks    SharedLink[]

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([userId])
  @@index([path])
  @@index([isTrash])
  @@index([parentId])
}

model File {
  id             String         @id @default(cuid())
  name           String
  path           String
  size           Int
  type           FileType

  isTrash        Boolean        @default(false)
  isStarred      Boolean        @default(false)

  fileUrl        String
  thumbnailUrl   String?
  imagekitFileId String         @unique

  userId         String
  user           User           @relation(fields: [userId], references: [id])

  folderId       String?
  folder         Folder?        @relation(fields: [folderId], references: [id])

  sharedLinks    SharedLink[]

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([userId])
  @@index([folderId])
  @@index([path])
  @@index([isTrash])
  @@index([type])
}

model SharedLink {
  id         String   @id @default(cuid())
  token      String   @unique

  fileId     String?
  folderId   String?

  file       File?    @relation(fields: [fileId], references: [id])
  folder     Folder?  @relation(fields: [folderId], references: [id])

  userId     String
  user       User     @relation(fields: [userId], references: [id])

  password   String?
  expiresAt  DateTime?

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([userId])
  @@index([fileId])
  @@index([folderId])
  @@index([expiresAt])
}

model Subscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  user                   User      @relation(fields: [userId], references: [id])

  plan                   SubscriptionPlan

  stripeCustomerId       String?
  stripeSubscriptionId   String?
  stripePriceId          String?
  currentPeriodEnd       DateTime?

  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt

  @@index([plan])
}

enum SubscriptionPlan {
  FREE
  PRO
  PRO_YEARLY
}

enum FileType {
  IMAGE
  VIDEO
  AUDIO
  PDF
  DOCUMENT
  OTHER
}
